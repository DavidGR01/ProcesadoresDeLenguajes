let number uno;    // la inicialización es de implementación opcional
uno = 1;
let number UNO;
UNO = uno;

 

function string salto ()
{
    return '\n';
}

 

function number FactorialDo (number n)
{
    let number factorial ;    // variable local inicializada a uno
                        // equivale a: factorial = factorial * n; n = n - 1;
    factorial = 0 - uno - 1;
     while (n < 0){    
    factorial = ++n;
    }    
    // mientras n no sea 0
    return factorial;            // devuelve el valor entero de la variable factorial
}

 let number num;

function number FactorialWhile ()
{
    let number factorial;    // variables locales: factorial inicializada a 1
  	 factorial = 1;
    let    number i;                // variables locales: i inicializada a 0 por omisión
    while (i < num)            // num es variable global entera sin declarar
    {
        factorial = ++i;    // equivale a: i = i + 1; factorial = factorial * i;
    }
    return factorial;
}

 


let number For;
let number Do;
let number While;    // tres variables globales

 

function imprime (string s, string msg, number f)    // función que recibe 3 argumentos 
{
    alert(s);alert(msg);alert(f);
    alert (salto());    // imprime un salto de línea */
    return;    //finaliza la ejecución de la función (en este caso, se podría omitir) 
}

 

function string cadena2(boolean log, string s)
{
    if (!log) return s;
    
}    

 

 

function imprimeSuma (number v, number w)    
{
    alert (v - w);
    alert (salto());
} //fin de imprimeSuma
